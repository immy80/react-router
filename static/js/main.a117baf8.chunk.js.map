{"version":3,"sources":["components/Nav.js","components/Product.js","components/Shop.js","components/Home.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","basketNumbers","href","Product","product","Shop","onClick","addToCart","Home","Error","App","state","cart","setState","console","log","this","length","exact","path","component","render","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yTA2BeA,G,YAvBH,SAACC,GACX,OACE,6BACE,0CACA,4BAOE,oCAAUA,EAAMC,eAChB,4BACE,uBAAGC,KAAK,KAAR,SAEF,4BACE,uBAAGA,KAAK,SAAR,aCVKC,EARC,SAACH,GACf,OACE,6BACE,4BAAKA,EAAMI,WCuBFC,EAzBF,SAACL,GACZ,OACE,6BACE,qCACA,6BACE,kBAAC,EAAD,CAASI,QAAS,WAElB,4BAAQE,QAAS,kBAAMN,EAAMO,UAAU,YAAvC,gBAEF,6BACE,kBAAC,EAAD,CAASH,QAAS,cAElB,4BAAQE,QAAS,kBAAMN,EAAMO,UAAU,gBAAvC,gBAIF,6BACE,kBAAC,EAAD,CAASH,QAAS,SAElB,4BAAQE,QAAS,kBAAMN,EAAMO,UAAU,UAAvC,kBCZOC,EARF,WACX,OACE,6BACE,sDCKSC,EARD,WACZ,OACE,6BACE,sDCoCSC,E,4MAhCbC,MAAQ,CACNC,KAAM,I,EAGRL,UAAY,SAACH,GACX,EAAKS,SAAS,CACZD,KAAM,EAAKD,MAAMC,KAAO,IAE1BE,QAAQC,IAAIX,GACZU,QAAQC,IAAI,Y,uDAGJ,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAKd,cAAee,KAAKL,MAAMC,KAAKK,SACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CACEU,OAAK,EACLC,KAAK,QACLE,OAAQ,kBAAM,kBAAC,EAAD,CAAMd,UAAW,EAAKA,eAEtC,kBAAC,EAAD,a,GAzBMe,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.a117baf8.chunk.js","sourcesContent":["import React from 'react';\n//import { Link } from 'react-router-dom';\nimport './Nav.css';\n\nconst Nav = (props) => {\n  return (\n    <nav>\n      <h1>Sweet Shop</h1>\n      <ul>\n        {/* <li>\n          <Link to='/'>Home</Link>\n        </li>\n        <li>\n          <Link to='/shop'>Shop</Link>\n        </li> */}\n        <li>Cart:{props.basketNumbers}</li>\n        <li>\n          <a href='/'>Home</a>\n        </li>\n        <li>\n          <a href='/shop'>Shop</a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\n\nconst Product = (props) => {\n  return (\n    <div>\n      <h2>{props.product}</h2>\n    </div>\n  );\n};\n\nexport default Product;\n","import React from 'react';\nimport Product from './Product';\n\nconst Shop = (props) => {\n  return (\n    <div>\n      <h1>Items</h1>\n      <div>\n        <Product product={'Crisps'} />\n\n        <button onClick={() => props.addToCart('Crisps')}>Add to Cart</button>\n      </div>\n      <div>\n        <Product product={'Chocolate'} />\n\n        <button onClick={() => props.addToCart('Chocolates')}>\n          Add to Cart\n        </button>\n      </div>\n      <div>\n        <Product product={'Coke'} />\n\n        <button onClick={() => props.addToCart('Coke')}>Add to Cart</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Shop;\n","import React from 'react';\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>This is the Homepage</h1>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst Error = () => {\n  return (\n    <div>\n      <h1>Sorry page not found</h1>\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { Fragment, Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Shop from './components/Shop';\nimport Home from './components/Home';\nimport Error from './components/Error';\n\nclass App extends Component {\n  state = {\n    cart: '',\n  };\n\n  addToCart = (product) => {\n    this.setState({\n      cart: this.state.cart + 1,\n    });\n    console.log(product);\n    console.log('Clicked');\n  };\n\n  render() {\n    return (\n      <BrowserRouter>\n        <Fragment>\n          <Nav basketNumbers={this.state.cart.length} />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route\n              exact\n              path='/shop'\n              render={() => <Shop addToCart={this.addToCart} />}\n            />\n            <Error />\n          </Switch>\n        </Fragment>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}